// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace KoiFengShuiSystem.DataAccess.Models;

public partial class KoiFengShuiContext : DbContext
{
    public KoiFengShuiContext()
    {
    }

    public KoiFengShuiContext(DbContextOptions<KoiFengShuiContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Direction> Directions { get; set; }

    public virtual DbSet<Element> Elements { get; set; }

    public virtual DbSet<FAQ> FAQs { get; set; }

    public virtual DbSet<FengShuiDirection> FengShuiDirections { get; set; }

    public virtual DbSet<FishPond> FishPonds { get; set; }

    public virtual DbSet<Follow> Follows { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<KoiBreed> KoiBreeds { get; set; }

    public virtual DbSet<ListingImage> ListingImages { get; set; }

    public virtual DbSet<MarketCategory> MarketCategories { get; set; }

    public virtual DbSet<MarketplaceListing> MarketplaceListings { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostCategory> PostCategories { get; set; }

    public virtual DbSet<PostImage> PostImages { get; set; }

    public virtual DbSet<Recommendation> Recommendations { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<ShapeCategory> ShapeCategories { get; set; }

    public virtual DbSet<SubcriptionTier> SubcriptionTiers { get; set; }

    public virtual DbSet<TrafficLog> TrafficLogs { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__349DA5A617CC3FAD");

            entity.ToTable("Account");

            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.Dob).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.Password).HasMaxLength(100);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");
            entity.Property(e => e.Wallet).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.Element).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.ElementId)
                .HasConstraintName("FK__Account__Element__286302EC");

            entity.HasOne(d => d.Role).WithMany(p => p.Accounts)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__Account__RoleId__29572725");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.CountryId).HasName("PK__Country__10D1609FD4ADF74A");

            entity.ToTable("Country");

            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Direction>(entity =>
        {
            entity.HasKey(e => e.DirectionId).HasName("PK__Directio__876847C62A0D879C");

            entity.ToTable("Direction");

            entity.Property(e => e.DirectionName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Element>(entity =>
        {
            entity.HasKey(e => e.ElementId).HasName("PK__Element__A429721A7D0CC836");

            entity.ToTable("Element");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ElementName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.LuckyNumber)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<FAQ>(entity =>
        {
            entity.HasKey(e => e.FAQId).HasName("PK__FAQ__4B89D182A50D47B3");

            entity.ToTable("FAQ");

            entity.Property(e => e.Answer).IsRequired();
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.Question)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Account).WithMany(p => p.FAQs)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FAQ__AccountId__68487DD7");
        });

        modelBuilder.Entity<FengShuiDirection>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FengShui__3214EC0716F400A0");

            entity.ToTable("FengShuiDirection");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Direction).WithMany(p => p.FengShuiDirections)
                .HasForeignKey(d => d.DirectionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FengShuiD__Direc__3B75D760");

            entity.HasOne(d => d.Element).WithMany(p => p.FengShuiDirections)
                .HasForeignKey(d => d.ElementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FengShuiD__Eleme__3C69FB99");
        });

        modelBuilder.Entity<FishPond>(entity =>
        {
            entity.HasKey(e => e.PondId).HasName("PK__FishPond__D18BF8346793315C");

            entity.HasOne(d => d.DirectionPlacementNavigation).WithMany(p => p.FishPonds)
                .HasForeignKey(d => d.DirectionPlacement)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FishPonds__Direc__403A8C7D");

            entity.HasOne(d => d.Shape).WithMany(p => p.FishPonds)
                .HasForeignKey(d => d.ShapeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FishPonds__Shape__3F466844");
        });

        modelBuilder.Entity<Follow>(entity =>
        {
            entity.HasKey(e => e.FollowId).HasName("PK__Follow__2CE810AE2B22245A");

            entity.ToTable("Follow");

            entity.HasOne(d => d.Account).WithMany(p => p.Follows)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Follow__AccountI__33D4B598");

            entity.HasOne(d => d.Post).WithMany(p => p.Follows)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Follow__PostId__32E0915F");
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.HasKey(e => e.ImageId).HasName("PK__Image__7516F70C6FDA40F6");

            entity.ToTable("Image");

            entity.Property(e => e.ImageUrl)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<KoiBreed>(entity =>
        {
            entity.HasKey(e => e.BreedId).HasName("PK__KoiBreed__D1E9AE9DF1503733");

            entity.Property(e => e.BreedName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Country).WithMany(p => p.KoiBreeds)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__KoiBreeds__Count__45F365D3");

            entity.HasOne(d => d.Element).WithMany(p => p.KoiBreeds)
                .HasForeignKey(d => d.ElementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__KoiBreeds__Eleme__44FF419A");
        });

        modelBuilder.Entity<ListingImage>(entity =>
        {
            entity.HasKey(e => e.ListingImageId).HasName("PK__ListingI__C6DC6D8701F8F829");

            entity.ToTable("ListingImage");

            entity.HasOne(d => d.Image).WithMany(p => p.ListingImages)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ListingIm__Image__628FA481");

            entity.HasOne(d => d.MarketListing).WithMany(p => p.ListingImages)
                .HasForeignKey(d => d.MarketListingId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ListingIm__Marke__619B8048");
        });

        modelBuilder.Entity<MarketCategory>(entity =>
        {
            entity.HasKey(e => e.Categoryid).HasName("PK__MarketCa__19060623C0D3AD94");

            entity.ToTable("MarketCategory");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(20);
        });

        modelBuilder.Entity<MarketplaceListing>(entity =>
        {
            entity.HasKey(e => e.ListingId).HasName("PK__Marketpl__BF3EBED0148C5DC4");

            entity.Property(e => e.Color).HasMaxLength(20);
            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.ExpiresAt).HasColumnType("datetime");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Title).IsRequired();

            entity.HasOne(d => d.Account).WithMany(p => p.MarketplaceListings)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Marketpla__Accou__52593CB8");

            entity.HasOne(d => d.Category).WithMany(p => p.MarketplaceListings)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Marketpla__Categ__5165187F");

            entity.HasOne(d => d.Element).WithMany(p => p.MarketplaceListings)
                .HasForeignKey(d => d.ElementId)
                .HasConstraintName("FK__Marketpla__Eleme__5441852A");

            entity.HasOne(d => d.Tier).WithMany(p => p.MarketplaceListings)
                .HasForeignKey(d => d.TierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Marketpla__TierI__534D60F1");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.PostId).HasName("PK__Post__AA12601812B69C85");

            entity.ToTable("Post");

            entity.Property(e => e.CreateAt).HasColumnType("datetime");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.UpdateAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Posts)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Post__AccountId__2F10007B");

            entity.HasOne(d => d.Element).WithMany(p => p.Posts)
                .HasForeignKey(d => d.ElementId)
                .HasConstraintName("FK__Post__ElementId__300424B4");

            entity.HasOne(d => d.IdNavigation).WithMany(p => p.Posts)
                .HasForeignKey(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Post__Id__2E1BDC42");
        });

        modelBuilder.Entity<PostCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__PostCate__3214EC07895A11BA");

            entity.ToTable("PostCategory");

            entity.Property(e => e.PostType)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<PostImage>(entity =>
        {
            entity.HasKey(e => e.PostImageId).HasName("PK__PostImag__BCD3CCD026F96A44");

            entity.ToTable("PostImage");

            entity.HasOne(d => d.Image).WithMany(p => p.PostImages)
                .HasForeignKey(d => d.ImageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PostImage__Image__5EBF139D");

            entity.HasOne(d => d.Post).WithMany(p => p.PostImages)
                .HasForeignKey(d => d.PostId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__PostImage__PostI__5DCAEF64");
        });

        modelBuilder.Entity<Recommendation>(entity =>
        {
            entity.HasKey(e => e.RecommendationId).HasName("PK__Recommen__AA15BEE451DD247D");

            entity.ToTable("Recommendation");

            entity.Property(e => e.CreatedAt).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Recommendations)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Recommend__Accou__48CFD27E");

            entity.HasOne(d => d.Breed).WithMany(p => p.Recommendations)
                .HasForeignKey(d => d.BreedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Recommend__Breed__49C3F6B7");

            entity.HasOne(d => d.Pond).WithMany(p => p.Recommendations)
                .HasForeignKey(d => d.PondId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Recommend__PondI__4AB81AF0");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE1A169BD450");

            entity.ToTable("Role");

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ShapeCategory>(entity =>
        {
            entity.HasKey(e => e.ShapeId).HasName("PK__ShapeCat__70FC8381AF19F6D6");

            entity.ToTable("ShapeCategory");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ShapeName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Element).WithMany(p => p.ShapeCategories)
                .HasForeignKey(d => d.ElementId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ShapeCate__Eleme__36B12243");
        });

        modelBuilder.Entity<SubcriptionTier>(entity =>
        {
            entity.HasKey(e => e.TierId).HasName("PK__Subcript__362F561D6A0A8385");

            entity.Property(e => e.TierName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<TrafficLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TrafficL__3214EC074475BD3E");

            entity.ToTable("TrafficLog");

            entity.Property(e => e.IpAddress).HasMaxLength(45);
            entity.Property(e => e.RequestMethod).HasMaxLength(10);
            entity.Property(e => e.RequestPath).HasMaxLength(255);
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
            entity.Property(e => e.UserAgent).HasMaxLength(255);

            entity.HasOne(d => d.Account).WithMany(p => p.TrafficLogs)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK_TrafficLog_Account");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transact__3214EC07BBFC76F6");

            entity.ToTable("Transaction");

            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TransactionDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Accou__5812160E");

            entity.HasOne(d => d.Listing).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.ListingId)
                .HasConstraintName("FK__Transacti__Listi__571DF1D5");

            entity.HasOne(d => d.Tier).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.TierId)
                .HasConstraintName("FK__Transacti__TierI__59063A47");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}